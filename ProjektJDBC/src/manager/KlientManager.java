package manager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import main.Klient;

public class KlientManager {
	private Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/";
	private String createTableKlient = "CREATE TABLE Klient(id_klient int GENERATED BY DEFAULT AS IDENTITY, imie varchar(50), nazwisko varchar(100), numertelefonu long)";
	
	private PreparedStatement dodajKlienta;
	private PreparedStatement usunKlienta;
	private PreparedStatement usunKlientow;
	private PreparedStatement edytujKlienta;
	private PreparedStatement pobierzKlientow;
	private Statement statement;
	
	public KlientManager(){
		try{
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while(rs.next()){
				if("Klient".equalsIgnoreCase(rs.getString("TABLE_NAME"))){
						tableExists = true;
						break;
			}
		}
			
		if(!tableExists){
			statement.executeUpdate(createTableKlient);
		}
		dodajKlienta = connection.prepareStatement("INSERT INTO Klient(imie, nazwisko, numertelefonu) VALUES (?, ?, ?)"); 
		usunKlienta = connection.prepareStatement("DELETE FROM Klient where id_klient = ?");
		usunKlientow = connection.prepareStatement("DELETE FROM Klient");
		edytujKlienta = connection.prepareStatement("UPDATE Klient set imie = ?, nazwisko = ?, numertelefonu = ? where id_klient = ?");
		pobierzKlientow = connection.prepareStatement("SELECT id_klient, imie, nazwisko, numertelefonu FROM Klient");
		}catch(SQLException e){
			e.printStackTrace();
		}
	}
	
	public Connection getConnection(){
		return connection;
	}
	
	public void wyczyscKlienta(){
		try{
			usunKlientow.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}
	}
	
	public int dodajKlienta(Klient klient){
		int licznik = 0;
		try{
			dodajKlienta.setString(1, klient.getImie());
			dodajKlienta.setString(2, klient.getNazwisko());
			dodajKlienta.setLong(3, klient.getNumertelefonu());
			licznik = dodajKlienta.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return licznik;
	}
	
	public int usunKlienta(Klient klient){
		int licznik = 0;
		try{
			usunKlienta.setInt(1, klient.getId());
			licznik = usunKlienta.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return licznik;
	}
	
	public int edytujKlienta(Klient klient){
		int licznik = 0;
		try{
			edytujKlienta.setString(1, klient.getImie());
			edytujKlienta.setString(2, klient.getNazwisko());
			edytujKlienta.setLong(3, klient.getNumertelefonu());
			edytujKlienta.setInt(4, klient.getId());
			licznik = edytujKlienta.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return licznik;
	}
	
	public List<Klient> pobierzKlientow(){
		List<Klient> klienci = new ArrayList<Klient>();
		try{
			ResultSet rs = pobierzKlientow.executeQuery();
			while(rs.next()){
				Klient k = new Klient();
				k.setId(rs.getInt("id_klient"));
				k.setImie(rs.getString("imie"));
				k.setNazwisko(rs.getString("nazwisko"));
				k.setNumertelefonu(rs.getLong("numertelefonu"));
				klienci.add(k);
			}
		}catch(SQLException e){
			e.printStackTrace();
		}
		return klienci;
	}
}